---
import NavLink from '@atoms/NavLink.astro';
import Logo from '@atoms/Logo.astro';
interface NavItem {
  href: string;
  label: string;
}

const { items } = Astro.props as { items: NavItem[] };
---

<nav class="flex items-center">
  <!-- Desktop Navigation -->
  <div class="hidden md:flex items-center space-x-4">
    {items.map(item => (
      <NavLink href={item.href}>{item.label}</NavLink>
    ))}
  </div>

  <!-- Mobile menu button -->
  <div class="md:hidden">
    <button
      id="mobile-menu-button"
      class="p-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-teal-500 rounded-md"
      aria-label="Abrir menú"
    >
      <svg id="hamburger-icon" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
      <svg id="close-icon" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
</nav>

<!-- Mobile menu overlay -->
<div id="mobile-menu-overlay" class="fixed inset-0 bg-black/50 z-40 hidden md:hidden"></div>

<!-- Mobile menu -->
<div id="mobile-menu" class="fixed top-0 right-0 h-full w-80 bg-white shadow-xl transform translate-x-full transition-transform duration-300 ease-in-out z-50 md:hidden">
  <div class="flex flex-col h-full">
    <!-- Mobile menu header -->
    <div class="flex items-center justify-between p-4 border-b border-gray-200">
      <div class="flex items-center">
          <Logo />
      </div>
      <button
        id="close-menu-button"
        class="p-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-teal-500 rounded-md"
        aria-label="Cerrar menú"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Mobile navigation links -->
    <div class="flex-1 py-6 overflow-y-auto">
      <div class="space-y-1 px-4">
        {items.map(item => (
          <a
            href={item.href}
            class="mobile-nav-link flex items-center px-4 py-3 text-base font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg transition-colors duration-200"
          >
            {item.label}
          </a>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  // Mobile menu functionality
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const closeMenuButton = document.getElementById('close-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
  const hamburgerIcon = document.getElementById('hamburger-icon');
  const closeIcon = document.getElementById('close-icon');
  const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');

  function openMenu() {
    mobileMenu?.classList.remove('translate-x-full');
    mobileMenuOverlay?.classList.remove('hidden');
    hamburgerIcon?.classList.add('hidden');
    closeIcon?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  function closeMenu() {
    mobileMenu?.classList.add('translate-x-full');
    mobileMenuOverlay?.classList.add('hidden');
    hamburgerIcon?.classList.remove('hidden');
    closeIcon?.classList.add('hidden');
    document.body.style.overflow = '';
  }

  // Event listeners
  mobileMenuButton?.addEventListener('click', openMenu);
  closeMenuButton?.addEventListener('click', closeMenu);
  mobileMenuOverlay?.addEventListener('click', closeMenu);

  // Close menu when clicking on navigation links
  mobileNavLinks.forEach(link => {
    link.addEventListener('click', closeMenu);
  });

  // Close menu on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeMenu();
    }
  });

  // Handle window resize
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 768) { // md breakpoint
      closeMenu();
    }
  });
</script>
